---

# Since the root filesystem is encrypted, it is safe to store keys for the
# ZFS volumes on it for auto unlocking. ZFS doesn't support TPM for this
# purpose, so this is the next best thing.
- name: Create keystore folder
  ansible.builtin.file:
    group: root
    mode: 0700
    owner: root
    path: /etc/keystore
    state: directory

- name: Include zfs vols file
  ansible.builtin.include_vars:
    file: zfs_vols.yml
  no_log: true

# Store the actual encryption keys with strict permissions. Keys are 32 byte
# long hex strings.
- name: Persist ZFS encryption keys
  ansible.builtin.copy:
    content: "{{ zfs_vols[item].key }}"
    dest: "/etc/keystore/tank-{{ item | lower() }}.key"
    group: root
    mode: 0400
    owner: root
  no_log: true
  when: zfs_vols[item].key is defined
  loop: "{{ zfs_vols.keys() }}"

# Create the volumes, encryption and other properties defined in the extra
# properties field.
- name: Create volumes
  community.general.zfs:
    name: "tank/{{ item }}"
    state: present
    extra_zfs_properties: "{{ zfs_vols[item].extra_zfs_properties | default({}) }}"
  loop: "{{ zfs_vols.keys() }}"

# Check if the volumes are mounted
- name: Check if the pool was imported
  community.general.zfs_facts:
    name: "tank/{{ item }}"
  loop: "{{ zfs_vols.keys() }}"
  loop_control:
    label: "{{ item }}"
  register: zfs_datasets

# When the pool was imported and the volumes aren't created here, then they
# need to be mounted manually
- name: Mount volume
  ansible.builtin.shell:
    cmd: "/sbin/zfs mount {{ item.name }}"
  when: item.ansible_facts.ansible_zfs_datasets[0].mounted == 'no'
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ zfs_datasets.results }}"
